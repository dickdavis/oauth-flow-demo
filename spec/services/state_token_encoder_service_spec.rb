# frozen_string_literal: true

require 'rails_helper'

RSpec.shared_examples 'returns status and errors for invalid param' do |param|
  it 'returns invalid_request status' do
    expect(service_call.status).to eq(:invalid_request)
  end

  it 'returns invalid param error message' do
    expect(service_call.body).to eq(
      errors: [
        I18n.t('services.state_token_encoder.invalid_param', param: param.to_s, value: send(param))
      ]
    )
  end
end

RSpec.describe StateTokenEncoderService do
  describe '.call' do
    subject(:service_call) do
      described_class.new(client_id:, client_state:, code_challenge:, code_challenge_method:, response_type:).call
    end

    let(:client_id) { 'democlient' }
    let(:client_state) { 'state provided by client' }
    let(:response_type) { 'code' }
    let(:code_challenge) { 'code challenge generated by client' }
    let(:code_challenge_method) { 'S256' }

    context 'with missing client_id' do
      let(:client_id) { '' }

      include_examples 'returns status and errors for invalid param', :client_id
    end

    context 'with invalid code_challenge' do
      let(:code_challenge) { '' }

      include_examples 'returns status and errors for invalid param', :code_challenge
    end

    context 'with missing code_challenge_method' do
      let(:code_challenge_method) { '' }

      include_examples 'returns status and errors for invalid param', :code_challenge_method
    end

    context 'with unpermitted code_challenge_method' do
      let(:code_challenge_method) { 'bar' }

      include_examples 'returns status and errors for invalid param', :code_challenge_method
    end

    context 'with missing response_type' do
      let(:response_type) { '' }

      include_examples 'returns status and errors for invalid param', :response_type
    end

    context 'with unpermitted response_type' do
      let(:response_type) { 'bar' }

      include_examples 'returns status and errors for invalid param', :response_type
    end

    context 'with valid arguments' do
      it 'returns ok status' do
        expect(service_call.status).to eq(:ok)
      end

      it 'returns a valid JWT token' do
        expect(service_call.body).to match(/\A[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+\z/)
      end

      it 'returns a token which contains the code_challenge and code_challenge_method' do
        decoded_token = JsonWebToken.decode(service_call.body)
        expect(decoded_token).to include(
          { client_id:, client_state:, code_challenge:, code_challenge_method:, response_type: }
        )
      end
    end
  end
end
